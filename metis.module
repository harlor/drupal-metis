<?php

/**
 * @file
 * Primary module hooks for Metis module.
 */

use Drupal\Component\Utility\Unicode;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_theme().
 */
function metis_theme() {
  return [
    'metis_codes' => [
      'variables' => [
        'code_public' => NULL,
        'code_private' => NULL,
        'server' => NULL,
        'show' => NULL,
      ],
    ],
    'metis_code_public' => [
      'variables' => [
        'code_public' => NULL,
        'code_private' => NULL,
        'server' => NULL,
        'show' => NULL,
      ],
    ],
    'metis_code_private' => [
      'variables' => [
        'code_public' => NULL,
        'code_private' => NULL,
        'server' => NULL,
        'show' => NULL,
      ],
    ],
    'metis_show' => [
      'variables' => [
        'code_public' => NULL,
        'code_private' => NULL,
        'server' => NULL,
        'show' => NULL,
      ],
    ],
  ];
}

/**
 * Prepares variables for metis_codes template.
 *
 * Default template: metis_codes.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - foo: Foo variable description.
 */
function template_preprocess_metis_codes(array &$variables) {
  $variables['foo'] = 'bar';
}

/**
 * Prepares variables for metis_code_public template.
 *
 * Default template: metis_code_public.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - foo: Foo variable description.
 */
function template_preprocess_metis_code_public(array &$variables) {
  $variables['foo'] = 'bar';
}

/**
 * Prepares variables for metis_code_private template.
 *
 * Default template: metis_code_private.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - foo: Foo variable description.
 */
function template_preprocess_metis_code_private(array &$variables) {
  $variables['foo'] = 'bar';
}

/**
 * Prepares variables for metis_show template.
 *
 * Default template: metis_show.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - foo: Foo variable description.
 */
function template_preprocess_metis_show(array &$variables) {
  $variables['foo'] = 'bar';
}

/**
 * Count unused codes.
 */
function metis_count_unused() {
  $connection = \Drupal::database();
  $query = $connection->select('metis', 'm');
  $query
    ->condition('m.used', 0, '=')
    ->addField('m', 'code_public');

  $count_query = $query->countQuery();
  $num_rows = $count_query->countQuery()->execute()->fetchField();

  return $num_rows;
}

/**
 * Get unused code.
 */
function metis_get_unused() {
  $connection = \Drupal::database();

  $query = $connection->select('metis', 'm');
  $query
    ->fields('m', ['code_public', 'code_private', 'server'])
    ->condition('m.used', 0, '=');

  $count_query = $query->countQuery();
  $results = $count_query->countQuery()->execute()->fetchField();

  // If there are no unused codes, return FALSE.
  if ($results == 0) {
    return FALSE;
  }
  // If there are unused codes, return an array
  // with public and private metis code.
  else {
    $query = $connection->select('metis', 'm');
    $query
      ->fields('m', ['code_public', 'code_private', 'server'])
      ->condition('m.used', 0, '=');

    $results = $query->range(0, 1)->execute()->fetchAssoc();
    return array(
      'code_public' => $results['code_public'],
      'code_private' => $results['code_private'],
      'server' => $results['server'],
    );
  }
}

/**
 * Set code used.
 */
function metis_set_used($code_public, $nid) {
  // Check if code has 32 characters and nid is present.
  if (Unicode::strlen($code_public) == 32 && is_numeric($nid)) {

    // Update database and set used codes as used.
    try {
      $connection = \Drupal::database();
      $query = $connection->update('metis');
      $query
        ->fields([
          'used' => $nid,
        ])
        ->condition('code_public', $code_public)
        ->condition('used', 0)
      ->execute();
      // No exception thrown; PDO thinks the record was inserted correctly.
      $message = t('Code %public_code has been set as "used" by node %nid.', ['%public_code' => $code_public, '%nid' => $nid]);
      \Drupal::logger('metis')->notice($message);
    }
    catch (PDOException $e) {
      $message = t('Code %public_code could not be set as "used" by node %nid. Error message: :error_message', ['%public_code' => $code_public, '%nid' => $nid, ':error_message' => $e->getMessage()]);
      \Drupal::logger('metis')->error($message);
      return FALSE;
    }
    return TRUE;
  }
  else {
    return FALSE;
  }

}
